// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BrowseResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileDownloadRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileSummary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileTransfer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StatusUpdate;
}  // namespace protobuf_protocol_2eproto
namespace fileprotocol {
class AuthRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthRequest>
      _instance;
} _AuthRequest_default_instance_;
class AuthResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthResponse>
      _instance;
} _AuthResponse_default_instance_;
class BrowseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrowseResponse>
      _instance;
} _BrowseResponse_default_instance_;
class FileSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileSummary>
      _instance;
} _FileSummary_default_instance_;
class FileDownloadRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileDownloadRequest>
      _instance;
} _FileDownloadRequest_default_instance_;
class FileTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransfer>
      _instance;
} _FileTransfer_default_instance_;
class StatusUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusUpdate>
      _instance;
} _StatusUpdate_default_instance_;
class MsgHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgHeader>
      _instance;
} _MsgHeader_default_instance_;
class MsgBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgBody>
      _instance;
  const ::fileprotocol::BrowseResponse* browse_response_;
  const ::fileprotocol::FileSummary* file_summary_;
  const ::fileprotocol::FileDownloadRequest* file_download_request_;
  const ::fileprotocol::FileTransfer* file_transfer_;
  const ::fileprotocol::StatusUpdate* status_update_;
  const ::fileprotocol::AuthRequest* auth_request_;
  const ::fileprotocol::AuthResponse* auth_response_;
} _MsgBody_default_instance_;
}  // namespace fileprotocol
namespace protobuf_protocol_2eproto {
static void InitDefaultsAuthRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_AuthRequest_default_instance_;
    new (ptr) ::fileprotocol::AuthRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::AuthRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthRequest}, {}};

static void InitDefaultsAuthResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_AuthResponse_default_instance_;
    new (ptr) ::fileprotocol::AuthResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::AuthResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthResponse}, {}};

static void InitDefaultsBrowseResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_BrowseResponse_default_instance_;
    new (ptr) ::fileprotocol::BrowseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::BrowseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BrowseResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrowseResponse}, {}};

static void InitDefaultsFileSummary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_FileSummary_default_instance_;
    new (ptr) ::fileprotocol::FileSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::FileSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileSummary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileSummary}, {}};

static void InitDefaultsFileDownloadRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_FileDownloadRequest_default_instance_;
    new (ptr) ::fileprotocol::FileDownloadRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::FileDownloadRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileDownloadRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileDownloadRequest}, {}};

static void InitDefaultsFileTransfer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_FileTransfer_default_instance_;
    new (ptr) ::fileprotocol::FileTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::FileTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTransfer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTransfer}, {}};

static void InitDefaultsStatusUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_StatusUpdate_default_instance_;
    new (ptr) ::fileprotocol::StatusUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::StatusUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StatusUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatusUpdate}, {}};

static void InitDefaultsMsgHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_MsgHeader_default_instance_;
    new (ptr) ::fileprotocol::MsgHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::MsgHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MsgHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMsgHeader}, {}};

static void InitDefaultsMsgBody() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileprotocol::_MsgBody_default_instance_;
    new (ptr) ::fileprotocol::MsgBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileprotocol::MsgBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_MsgBody =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsMsgBody}, {
      &protobuf_protocol_2eproto::scc_info_BrowseResponse.base,
      &protobuf_protocol_2eproto::scc_info_FileSummary.base,
      &protobuf_protocol_2eproto::scc_info_FileDownloadRequest.base,
      &protobuf_protocol_2eproto::scc_info_FileTransfer.base,
      &protobuf_protocol_2eproto::scc_info_StatusUpdate.base,
      &protobuf_protocol_2eproto::scc_info_AuthRequest.base,
      &protobuf_protocol_2eproto::scc_info_AuthResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AuthRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BrowseResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileSummary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileDownloadRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransfer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatusUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MsgHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MsgBody.base);
}

}  // namespace protobuf_protocol_2eproto
namespace fileprotocol {
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

bool AuthRequestState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool AuthResponseState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AuthRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRequest::kAuthRequestStateFieldNumber;
const int AuthRequest::kUsernameFieldNumber;
const int AuthRequest::kPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRequest::AuthRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_AuthRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.AuthRequest)
}
AuthRequest::AuthRequest(const AuthRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  auth_request_state_ = from.auth_request_state_;
  // @@protoc_insertion_point(copy_constructor:fileprotocol.AuthRequest)
}

void AuthRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_request_state_ = 0;
}

AuthRequest::~AuthRequest() {
  // @@protoc_insertion_point(destructor:fileprotocol.AuthRequest)
  SharedDtor();
}

void AuthRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRequest& AuthRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_AuthRequest.base);
  return *internal_default_instance();
}


void AuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.AuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_request_state_ = 0;
  _internal_metadata_.Clear();
}

bool AuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.AuthRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fileprotocol.AuthRequestState auth_request_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auth_request_state(static_cast< ::fileprotocol::AuthRequestState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.AuthRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), static_cast<int>(this->passwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.AuthRequest.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.AuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.AuthRequest)
  return false;
#undef DO_
}

void AuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.AuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fileprotocol.AuthRequestState auth_request_state = 1;
  if (this->auth_request_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->auth_request_state(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.AuthRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // string passwd = 3;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.AuthRequest.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->passwd(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.AuthRequest)
}

size_t AuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.AuthRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string passwd = 3;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // .fileprotocol.AuthRequestState auth_request_state = 1;
  if (this->auth_request_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auth_request_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthRequest*>(&from));
}

void AuthRequest::MergeFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.AuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.auth_request_state() != 0) {
    set_auth_request_state(from.auth_request_state());
  }
}

void AuthRequest::CopyFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.AuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRequest::IsInitialized() const {
  return true;
}

void AuthRequest::Swap(AuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRequest::InternalSwap(AuthRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwd_.Swap(&other->passwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_request_state_, other->auth_request_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthRequest::GetTypeName() const {
  return "fileprotocol.AuthRequest";
}


// ===================================================================

void AuthResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResponse::kAuthResponseStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResponse::AuthResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_AuthResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.AuthResponse)
}
AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_response_state_ = from.auth_response_state_;
  // @@protoc_insertion_point(copy_constructor:fileprotocol.AuthResponse)
}

void AuthResponse::SharedCtor() {
  auth_response_state_ = 0;
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:fileprotocol.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
}

void AuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthResponse& AuthResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_AuthResponse.base);
  return *internal_default_instance();
}


void AuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.AuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_response_state_ = 0;
  _internal_metadata_.Clear();
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.AuthResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fileprotocol.AuthResponseState auth_response_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auth_response_state(static_cast< ::fileprotocol::AuthResponseState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.AuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fileprotocol.AuthResponseState auth_response_state = 1;
  if (this->auth_response_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->auth_response_state(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.AuthResponse)
}

size_t AuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.AuthResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .fileprotocol.AuthResponseState auth_response_state = 1;
  if (this->auth_response_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auth_response_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthResponse*>(&from));
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.AuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_response_state() != 0) {
    set_auth_response_state(from.auth_response_state());
  }
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.AuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResponse::InternalSwap(AuthResponse* other) {
  using std::swap;
  swap(auth_response_state_, other->auth_response_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthResponse::GetTypeName() const {
  return "fileprotocol.AuthResponse";
}


// ===================================================================

void BrowseResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrowseResponse::kFilenamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrowseResponse::BrowseResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_BrowseResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.BrowseResponse)
}
BrowseResponse::BrowseResponse(const BrowseResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      filenames_(from.filenames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fileprotocol.BrowseResponse)
}

void BrowseResponse::SharedCtor() {
}

BrowseResponse::~BrowseResponse() {
  // @@protoc_insertion_point(destructor:fileprotocol.BrowseResponse)
  SharedDtor();
}

void BrowseResponse::SharedDtor() {
}

void BrowseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrowseResponse& BrowseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_BrowseResponse.base);
  return *internal_default_instance();
}


void BrowseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.BrowseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filenames_.Clear();
  _internal_metadata_.Clear();
}

bool BrowseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.BrowseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string filenames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.BrowseResponse.filenames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.BrowseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.BrowseResponse)
  return false;
#undef DO_
}

void BrowseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.BrowseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filenames = 1;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.BrowseResponse.filenames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filenames(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.BrowseResponse)
}

size_t BrowseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.BrowseResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated string filenames = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrowseResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BrowseResponse*>(&from));
}

void BrowseResponse::MergeFrom(const BrowseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.BrowseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filenames_.MergeFrom(from.filenames_);
}

void BrowseResponse::CopyFrom(const BrowseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.BrowseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseResponse::IsInitialized() const {
  return true;
}

void BrowseResponse::Swap(BrowseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrowseResponse::InternalSwap(BrowseResponse* other) {
  using std::swap;
  filenames_.InternalSwap(CastToBase(&other->filenames_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BrowseResponse::GetTypeName() const {
  return "fileprotocol.BrowseResponse";
}


// ===================================================================

void FileSummary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSummary::kFilenameFieldNumber;
const int FileSummary::kFormatFieldNumber;
const int FileSummary::kFilehashFieldNumber;
const int FileSummary::kFilesizeFieldNumber;
const int FileSummary::kTotalChunkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSummary::FileSummary()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_FileSummary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.FileSummary)
}
FileSummary::FileSummary(const FileSummary& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  filehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filehash().size() > 0) {
    filehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filehash_);
  }
  ::memcpy(&filesize_, &from.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_chunk_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(total_chunk_));
  // @@protoc_insertion_point(copy_constructor:fileprotocol.FileSummary)
}

void FileSummary::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_chunk_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(total_chunk_));
}

FileSummary::~FileSummary() {
  // @@protoc_insertion_point(destructor:fileprotocol.FileSummary)
  SharedDtor();
}

void FileSummary::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSummary& FileSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_FileSummary.base);
  return *internal_default_instance();
}


void FileSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.FileSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_chunk_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(total_chunk_));
  _internal_metadata_.Clear();
}

bool FileSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.FileSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.FileSummary.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.FileSummary.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filehash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filehash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filehash().data(), static_cast<int>(this->filehash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.FileSummary.filehash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 filesize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 total_chunk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &total_chunk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.FileSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.FileSummary)
  return false;
#undef DO_
}

void FileSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.FileSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.FileSummary.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.FileSummary.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  // string filehash = 3;
  if (this->filehash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filehash().data(), static_cast<int>(this->filehash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.FileSummary.filehash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filehash(), output);
  }

  // fixed64 filesize = 4;
  if (this->filesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->filesize(), output);
  }

  // fixed32 total_chunk = 5;
  if (this->total_chunk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->total_chunk(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.FileSummary)
}

size_t FileSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.FileSummary)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string format = 2;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  // string filehash = 3;
  if (this->filehash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filehash());
  }

  // fixed64 filesize = 4;
  if (this->filesize() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 total_chunk = 5;
  if (this->total_chunk() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSummary::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileSummary*>(&from));
}

void FileSummary::MergeFrom(const FileSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.FileSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.filehash().size() > 0) {

    filehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filehash_);
  }
  if (from.filesize() != 0) {
    set_filesize(from.filesize());
  }
  if (from.total_chunk() != 0) {
    set_total_chunk(from.total_chunk());
  }
}

void FileSummary::CopyFrom(const FileSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.FileSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSummary::IsInitialized() const {
  return true;
}

void FileSummary::Swap(FileSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSummary::InternalSwap(FileSummary* other) {
  using std::swap;
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filehash_.Swap(&other->filehash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filesize_, other->filesize_);
  swap(total_chunk_, other->total_chunk_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileSummary::GetTypeName() const {
  return "fileprotocol.FileSummary";
}


// ===================================================================

void FileDownloadRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDownloadRequest::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDownloadRequest::FileDownloadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_FileDownloadRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.FileDownloadRequest)
}
FileDownloadRequest::FileDownloadRequest(const FileDownloadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:fileprotocol.FileDownloadRequest)
}

void FileDownloadRequest::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileDownloadRequest::~FileDownloadRequest() {
  // @@protoc_insertion_point(destructor:fileprotocol.FileDownloadRequest)
  SharedDtor();
}

void FileDownloadRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileDownloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileDownloadRequest& FileDownloadRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_FileDownloadRequest.base);
  return *internal_default_instance();
}


void FileDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.FileDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.FileDownloadRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.FileDownloadRequest.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.FileDownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.FileDownloadRequest)
  return false;
#undef DO_
}

void FileDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.FileDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.FileDownloadRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.FileDownloadRequest)
}

size_t FileDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.FileDownloadRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileDownloadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileDownloadRequest*>(&from));
}

void FileDownloadRequest::MergeFrom(const FileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.FileDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void FileDownloadRequest::CopyFrom(const FileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.FileDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDownloadRequest::IsInitialized() const {
  return true;
}

void FileDownloadRequest::Swap(FileDownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDownloadRequest::InternalSwap(FileDownloadRequest* other) {
  using std::swap;
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileDownloadRequest::GetTypeName() const {
  return "fileprotocol.FileDownloadRequest";
}


// ===================================================================

void FileTransfer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransfer::kStatusFieldNumber;
const int FileTransfer::kFilehashFieldNumber;
const int FileTransfer::kChunkIndexFieldNumber;
const int FileTransfer::kDataLenFieldNumber;
const int FileTransfer::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransfer::FileTransfer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_FileTransfer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.FileTransfer)
}
FileTransfer::FileTransfer(const FileTransfer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filehash().size() > 0) {
    filehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filehash_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_len_) -
    reinterpret_cast<char*>(&status_)) + sizeof(data_len_));
  // @@protoc_insertion_point(copy_constructor:fileprotocol.FileTransfer)
}

void FileTransfer::SharedCtor() {
  filehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&status_)) + sizeof(data_len_));
}

FileTransfer::~FileTransfer() {
  // @@protoc_insertion_point(destructor:fileprotocol.FileTransfer)
  SharedDtor();
}

void FileTransfer::SharedDtor() {
  filehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransfer& FileTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_FileTransfer.base);
  return *internal_default_instance();
}


void FileTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.FileTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&status_)) + sizeof(data_len_));
  _internal_metadata_.Clear();
}

bool FileTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.FileTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fileprotocol.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::fileprotocol::Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filehash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filehash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filehash().data(), static_cast<int>(this->filehash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fileprotocol.FileTransfer.filehash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 chunk_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunk_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 data_len = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.FileTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.FileTransfer)
  return false;
#undef DO_
}

void FileTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.FileTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fileprotocol.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string filehash = 2;
  if (this->filehash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filehash().data(), static_cast<int>(this->filehash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fileprotocol.FileTransfer.filehash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filehash(), output);
  }

  // fixed32 chunk_index = 3;
  if (this->chunk_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->chunk_index(), output);
  }

  // fixed64 data_len = 4;
  if (this->data_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->data_len(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.FileTransfer)
}

size_t FileTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.FileTransfer)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string filehash = 2;
  if (this->filehash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filehash());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .fileprotocol.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // fixed32 chunk_index = 3;
  if (this->chunk_index() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 data_len = 4;
  if (this->data_len() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransfer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileTransfer*>(&from));
}

void FileTransfer::MergeFrom(const FileTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.FileTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filehash().size() > 0) {

    filehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filehash_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.chunk_index() != 0) {
    set_chunk_index(from.chunk_index());
  }
  if (from.data_len() != 0) {
    set_data_len(from.data_len());
  }
}

void FileTransfer::CopyFrom(const FileTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.FileTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransfer::IsInitialized() const {
  return true;
}

void FileTransfer::Swap(FileTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransfer::InternalSwap(FileTransfer* other) {
  using std::swap;
  filehash_.Swap(&other->filehash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(chunk_index_, other->chunk_index_);
  swap(data_len_, other->data_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileTransfer::GetTypeName() const {
  return "fileprotocol.FileTransfer";
}


// ===================================================================

void StatusUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusUpdate::kStatusFieldNumber;
const int StatusUpdate::kNeedChunkIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusUpdate::StatusUpdate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_StatusUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.StatusUpdate)
}
StatusUpdate::StatusUpdate(const StatusUpdate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&need_chunk_index_) -
    reinterpret_cast<char*>(&status_)) + sizeof(need_chunk_index_));
  // @@protoc_insertion_point(copy_constructor:fileprotocol.StatusUpdate)
}

void StatusUpdate::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_chunk_index_) -
      reinterpret_cast<char*>(&status_)) + sizeof(need_chunk_index_));
}

StatusUpdate::~StatusUpdate() {
  // @@protoc_insertion_point(destructor:fileprotocol.StatusUpdate)
  SharedDtor();
}

void StatusUpdate::SharedDtor() {
}

void StatusUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusUpdate& StatusUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_StatusUpdate.base);
  return *internal_default_instance();
}


void StatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.StatusUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_chunk_index_) -
      reinterpret_cast<char*>(&status_)) + sizeof(need_chunk_index_));
  _internal_metadata_.Clear();
}

bool StatusUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.StatusUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fileprotocol.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::fileprotocol::Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 need_chunk_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &need_chunk_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.StatusUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.StatusUpdate)
  return false;
#undef DO_
}

void StatusUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.StatusUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fileprotocol.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // fixed32 need_chunk_index = 2;
  if (this->need_chunk_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->need_chunk_index(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.StatusUpdate)
}

size_t StatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.StatusUpdate)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .fileprotocol.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // fixed32 need_chunk_index = 2;
  if (this->need_chunk_index() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatusUpdate*>(&from));
}

void StatusUpdate::MergeFrom(const StatusUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.StatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.need_chunk_index() != 0) {
    set_need_chunk_index(from.need_chunk_index());
  }
}

void StatusUpdate::CopyFrom(const StatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.StatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusUpdate::IsInitialized() const {
  return true;
}

void StatusUpdate::Swap(StatusUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusUpdate::InternalSwap(StatusUpdate* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(need_chunk_index_, other->need_chunk_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StatusUpdate::GetTypeName() const {
  return "fileprotocol.StatusUpdate";
}


// ===================================================================

void MsgHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHeader::kMagicFieldNumber;
const int MsgHeader::kVersionFieldNumber;
const int MsgHeader::kLengthFieldNumber;
const int MsgHeader::kSessionIdFieldNumber;
const int MsgHeader::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHeader::MsgHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_MsgHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.MsgHeader)
}
MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fileprotocol.MsgHeader)
}

void MsgHeader::SharedCtor() {
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(type_));
}

MsgHeader::~MsgHeader() {
  // @@protoc_insertion_point(destructor:fileprotocol.MsgHeader)
  SharedDtor();
}

void MsgHeader::SharedDtor() {
}

void MsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgHeader& MsgHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_MsgHeader.base);
  return *internal_default_instance();
}


void MsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.MsgHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 magic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &magic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fileprotocol.MsgType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::fileprotocol::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.MsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.MsgHeader)
  return false;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 magic = 1;
  if (this->magic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->magic(), output);
  }

  // fixed32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->version(), output);
  }

  // fixed32 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->length(), output);
  }

  // fixed32 session_id = 4;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->session_id(), output);
  }

  // .fileprotocol.MsgType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.MsgHeader)
}

size_t MsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.MsgHeader)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // fixed32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 version = 2;
  if (this->version() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 length = 3;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 session_id = 4;
  if (this->session_id() != 0) {
    total_size += 1 + 4;
  }

  // .fileprotocol.MsgType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgHeader*>(&from));
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    set_magic(from.magic());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHeader::InternalSwap(MsgHeader* other) {
  using std::swap;
  swap(magic_, other->magic_);
  swap(version_, other->version_);
  swap(length_, other->length_);
  swap(session_id_, other->session_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MsgHeader::GetTypeName() const {
  return "fileprotocol.MsgHeader";
}


// ===================================================================

void MsgBody::InitAsDefaultInstance() {
}
void MsgBody::set_allocated_browse_response(::fileprotocol::BrowseResponse* browse_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (browse_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      browse_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, browse_response, submessage_arena);
    }
    set_has_browse_response();
    body_.browse_response_ = browse_response;
  }
  // @@protoc_insertion_point(field_set_allocated:fileprotocol.MsgBody.browse_response)
}
void MsgBody::set_allocated_file_summary(::fileprotocol::FileSummary* file_summary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (file_summary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_summary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_summary, submessage_arena);
    }
    set_has_file_summary();
    body_.file_summary_ = file_summary;
  }
  // @@protoc_insertion_point(field_set_allocated:fileprotocol.MsgBody.file_summary)
}
void MsgBody::set_allocated_file_download_request(::fileprotocol::FileDownloadRequest* file_download_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (file_download_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_download_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_download_request, submessage_arena);
    }
    set_has_file_download_request();
    body_.file_download_request_ = file_download_request;
  }
  // @@protoc_insertion_point(field_set_allocated:fileprotocol.MsgBody.file_download_request)
}
void MsgBody::set_allocated_file_transfer(::fileprotocol::FileTransfer* file_transfer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (file_transfer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_transfer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_transfer, submessage_arena);
    }
    set_has_file_transfer();
    body_.file_transfer_ = file_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:fileprotocol.MsgBody.file_transfer)
}
void MsgBody::set_allocated_status_update(::fileprotocol::StatusUpdate* status_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (status_update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_update, submessage_arena);
    }
    set_has_status_update();
    body_.status_update_ = status_update;
  }
  // @@protoc_insertion_point(field_set_allocated:fileprotocol.MsgBody.status_update)
}
void MsgBody::set_allocated_auth_request(::fileprotocol::AuthRequest* auth_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (auth_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      auth_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth_request, submessage_arena);
    }
    set_has_auth_request();
    body_.auth_request_ = auth_request;
  }
  // @@protoc_insertion_point(field_set_allocated:fileprotocol.MsgBody.auth_request)
}
void MsgBody::set_allocated_auth_response(::fileprotocol::AuthResponse* auth_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (auth_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      auth_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth_response, submessage_arena);
    }
    set_has_auth_response();
    body_.auth_response_ = auth_response;
  }
  // @@protoc_insertion_point(field_set_allocated:fileprotocol.MsgBody.auth_response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBody::kBrowseResponseFieldNumber;
const int MsgBody::kFileSummaryFieldNumber;
const int MsgBody::kFileDownloadRequestFieldNumber;
const int MsgBody::kFileTransferFieldNumber;
const int MsgBody::kStatusUpdateFieldNumber;
const int MsgBody::kAuthRequestFieldNumber;
const int MsgBody::kAuthResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBody::MsgBody()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_MsgBody.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileprotocol.MsgBody)
}
MsgBody::MsgBody(const MsgBody& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_body();
  switch (from.body_case()) {
    case kBrowseResponse: {
      mutable_browse_response()->::fileprotocol::BrowseResponse::MergeFrom(from.browse_response());
      break;
    }
    case kFileSummary: {
      mutable_file_summary()->::fileprotocol::FileSummary::MergeFrom(from.file_summary());
      break;
    }
    case kFileDownloadRequest: {
      mutable_file_download_request()->::fileprotocol::FileDownloadRequest::MergeFrom(from.file_download_request());
      break;
    }
    case kFileTransfer: {
      mutable_file_transfer()->::fileprotocol::FileTransfer::MergeFrom(from.file_transfer());
      break;
    }
    case kStatusUpdate: {
      mutable_status_update()->::fileprotocol::StatusUpdate::MergeFrom(from.status_update());
      break;
    }
    case kAuthRequest: {
      mutable_auth_request()->::fileprotocol::AuthRequest::MergeFrom(from.auth_request());
      break;
    }
    case kAuthResponse: {
      mutable_auth_response()->::fileprotocol::AuthResponse::MergeFrom(from.auth_response());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fileprotocol.MsgBody)
}

void MsgBody::SharedCtor() {
  clear_has_body();
}

MsgBody::~MsgBody() {
  // @@protoc_insertion_point(destructor:fileprotocol.MsgBody)
  SharedDtor();
}

void MsgBody::SharedDtor() {
  if (has_body()) {
    clear_body();
  }
}

void MsgBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBody& MsgBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_MsgBody.base);
  return *internal_default_instance();
}


void MsgBody::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:fileprotocol.MsgBody)
  switch (body_case()) {
    case kBrowseResponse: {
      delete body_.browse_response_;
      break;
    }
    case kFileSummary: {
      delete body_.file_summary_;
      break;
    }
    case kFileDownloadRequest: {
      delete body_.file_download_request_;
      break;
    }
    case kFileTransfer: {
      delete body_.file_transfer_;
      break;
    }
    case kStatusUpdate: {
      delete body_.status_update_;
      break;
    }
    case kAuthRequest: {
      delete body_.auth_request_;
      break;
    }
    case kAuthResponse: {
      delete body_.auth_response_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void MsgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:fileprotocol.MsgBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_body();
  _internal_metadata_.Clear();
}

bool MsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:fileprotocol.MsgBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fileprotocol.BrowseResponse browse_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_browse_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fileprotocol.FileSummary file_summary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fileprotocol.FileDownloadRequest file_download_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_download_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fileprotocol.FileTransfer file_transfer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_transfer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fileprotocol.StatusUpdate status_update = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fileprotocol.AuthRequest auth_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fileprotocol.AuthResponse auth_response = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileprotocol.MsgBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileprotocol.MsgBody)
  return false;
#undef DO_
}

void MsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileprotocol.MsgBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fileprotocol.BrowseResponse browse_response = 1;
  if (has_browse_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_browse_response(), output);
  }

  // .fileprotocol.FileSummary file_summary = 2;
  if (has_file_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_file_summary(), output);
  }

  // .fileprotocol.FileDownloadRequest file_download_request = 3;
  if (has_file_download_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_file_download_request(), output);
  }

  // .fileprotocol.FileTransfer file_transfer = 4;
  if (has_file_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_file_transfer(), output);
  }

  // .fileprotocol.StatusUpdate status_update = 5;
  if (has_status_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_status_update(), output);
  }

  // .fileprotocol.AuthRequest auth_request = 6;
  if (has_auth_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_auth_request(), output);
  }

  // .fileprotocol.AuthResponse auth_response = 7;
  if (has_auth_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_auth_response(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:fileprotocol.MsgBody)
}

size_t MsgBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileprotocol.MsgBody)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  switch (body_case()) {
    // .fileprotocol.BrowseResponse browse_response = 1;
    case kBrowseResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.browse_response_);
      break;
    }
    // .fileprotocol.FileSummary file_summary = 2;
    case kFileSummary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.file_summary_);
      break;
    }
    // .fileprotocol.FileDownloadRequest file_download_request = 3;
    case kFileDownloadRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.file_download_request_);
      break;
    }
    // .fileprotocol.FileTransfer file_transfer = 4;
    case kFileTransfer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.file_transfer_);
      break;
    }
    // .fileprotocol.StatusUpdate status_update = 5;
    case kStatusUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.status_update_);
      break;
    }
    // .fileprotocol.AuthRequest auth_request = 6;
    case kAuthRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.auth_request_);
      break;
    }
    // .fileprotocol.AuthResponse auth_response = 7;
    case kAuthResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.auth_response_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBody::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgBody*>(&from));
}

void MsgBody::MergeFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileprotocol.MsgBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.body_case()) {
    case kBrowseResponse: {
      mutable_browse_response()->::fileprotocol::BrowseResponse::MergeFrom(from.browse_response());
      break;
    }
    case kFileSummary: {
      mutable_file_summary()->::fileprotocol::FileSummary::MergeFrom(from.file_summary());
      break;
    }
    case kFileDownloadRequest: {
      mutable_file_download_request()->::fileprotocol::FileDownloadRequest::MergeFrom(from.file_download_request());
      break;
    }
    case kFileTransfer: {
      mutable_file_transfer()->::fileprotocol::FileTransfer::MergeFrom(from.file_transfer());
      break;
    }
    case kStatusUpdate: {
      mutable_status_update()->::fileprotocol::StatusUpdate::MergeFrom(from.status_update());
      break;
    }
    case kAuthRequest: {
      mutable_auth_request()->::fileprotocol::AuthRequest::MergeFrom(from.auth_request());
      break;
    }
    case kAuthResponse: {
      mutable_auth_response()->::fileprotocol::AuthResponse::MergeFrom(from.auth_response());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
}

void MsgBody::CopyFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileprotocol.MsgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody::IsInitialized() const {
  return true;
}

void MsgBody::Swap(MsgBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBody::InternalSwap(MsgBody* other) {
  using std::swap;
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MsgBody::GetTypeName() const {
  return "fileprotocol.MsgBody";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fileprotocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::AuthRequest* Arena::CreateMaybeMessage< ::fileprotocol::AuthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::AuthRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::AuthResponse* Arena::CreateMaybeMessage< ::fileprotocol::AuthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::AuthResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::BrowseResponse* Arena::CreateMaybeMessage< ::fileprotocol::BrowseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::BrowseResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::FileSummary* Arena::CreateMaybeMessage< ::fileprotocol::FileSummary >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::FileSummary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::FileDownloadRequest* Arena::CreateMaybeMessage< ::fileprotocol::FileDownloadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::FileDownloadRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::FileTransfer* Arena::CreateMaybeMessage< ::fileprotocol::FileTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::FileTransfer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::StatusUpdate* Arena::CreateMaybeMessage< ::fileprotocol::StatusUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::StatusUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::MsgHeader* Arena::CreateMaybeMessage< ::fileprotocol::MsgHeader >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::MsgHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileprotocol::MsgBody* Arena::CreateMaybeMessage< ::fileprotocol::MsgBody >(Arena* arena) {
  return Arena::CreateInternal< ::fileprotocol::MsgBody >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
